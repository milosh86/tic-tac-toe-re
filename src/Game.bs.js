// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Board = require("./Board.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var initialState = /* record */[
  /* board : :: */[
    /* :: */[
      /* Empty */0,
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* [] */0
            ]
          ]
        ],
        /* [] */0
      ]
    ]
  ],
  /* gameState : Playing */Block.__(0, [/* Cross */1]),
  /* count */0
];

function updateBoard(board, gameState, id) {
  return List.mapi((function (rowIdx, row) {
                return List.mapi((function (cellIdx, cell) {
                              var match = String(rowIdx) + String(cellIdx) === id;
                              if (match && !cell) {
                                if (typeof gameState === "number" || gameState.tag) {
                                  return /* Empty */0;
                                } else {
                                  return /* Marked */[gameState[0]];
                                }
                              } else {
                                return cell;
                              }
                            }), row);
              }), board);
}

var winningCombs = /* :: */[
  /* :: */[
    0,
    /* :: */[
      1,
      /* :: */[
        2,
        /* [] */0
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      3,
      /* :: */[
        4,
        /* :: */[
          5,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        6,
        /* :: */[
          7,
          /* :: */[
            8,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            3,
            /* :: */[
              6,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              4,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                5,
                /* :: */[
                  8,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  4,
                  /* :: */[
                    8,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  2,
                  /* :: */[
                    4,
                    /* :: */[
                      6,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function getWinner(board) {
  var flattenBoard = List.flatten(board);
  try {
    var param = List.find((function (comb) {
            var exit = 0;
            if (comb) {
              var match = comb[1];
              if (match) {
                var match$1 = match[1];
                if (match$1 && !match$1[1]) {
                  var match$2 = List.nth(flattenBoard, comb[0]);
                  var match$3 = List.nth(flattenBoard, match[0]);
                  var match$4 = List.nth(flattenBoard, match$1[0]);
                  if (match$2) {
                    if (match$2[0]) {
                      if (match$3 && match$3[0] && match$4 && match$4[0]) {
                        return true;
                      } else {
                        return false;
                      }
                    } else if (match$3 && !(match$3[0] || !(match$4 && !match$4[0]))) {
                      return true;
                    } else {
                      return false;
                    }
                  } else {
                    return false;
                  }
                } else {
                  exit = 1;
                }
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
            if (exit === 1) {
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "Game.re",
                      45,
                      12
                    ]
                  ];
            }
            
          }), winningCombs);
    var exit = 0;
    if (param) {
      var match = param[1];
      if (match) {
        var match$1 = match[1];
        if (match$1 && !match$1[1]) {
          var param$1 = List.nth(flattenBoard, param[0]);
          if (param$1) {
            return param$1[0];
          } else {
            throw [
                  Caml_builtin_exceptions.match_failure,
                  /* tuple */[
                    "Game.re",
                    51,
                    40
                  ]
                ];
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Game.re",
              51,
              10
            ]
          ];
    }
    
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return undefined;
    } else {
      throw exn;
    }
  }
}

function isDraw(board) {
  return List.for_all((function (field) {
                if (field) {
                  return true;
                } else {
                  return false;
                }
              }), List.flatten(board));
}

function updateGameState(updatedBoard, oldBoard, gameState) {
  var match = Caml_obj.caml_equal(updatedBoard, oldBoard);
  if (match) {
    return gameState;
  } else {
    var winner = getWinner(updatedBoard);
    var isDraw$1 = isDraw(updatedBoard);
    if (winner !== undefined) {
      return /* Winner */Block.__(1, [winner]);
    } else if (isDraw$1) {
      return /* Draw */0;
    } else if (typeof gameState === "number" || gameState.tag) {
      return gameState;
    } else if (gameState[0]) {
      return /* Playing */Block.__(0, [/* Circle */0]);
    } else {
      return /* Playing */Block.__(0, [/* Cross */1]);
    }
  }
}

var component = ReasonReact.reducerComponent("Game");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              return React.createElement("div", {
                          className: "game"
                        }, ReasonReact.element(undefined, undefined, Board.make(param[/* state */1], (function (id) {
                                    return Curry._1(send, /* ClickSquare */[id]);
                                  }), (function (_evt) {
                                    return Curry._1(send, /* Restart */0);
                                  }), /* array */[])));
            }),
          /* initialState */(function (param) {
              return initialState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                var updatedBoard = updateBoard(state[/* board */0], state[/* gameState */1], action[0]);
                return /* Update */Block.__(0, [/* record */[
                            /* board */updatedBoard,
                            /* gameState */updateGameState(updatedBoard, state[/* board */0], state[/* gameState */1]),
                            /* count */state[/* count */2]
                          ]]);
              } else {
                return /* Update */Block.__(0, [initialState]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.initialState = initialState;
exports.updateBoard = updateBoard;
exports.winningCombs = winningCombs;
exports.getWinner = getWinner;
exports.isDraw = isDraw;
exports.updateGameState = updateGameState;
exports.component = component;
exports.make = make;
/* component Not a pure module */
